[01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/serial/lib/src/impl/list_ports/list_ports_linux.cc:[m[K In function â€˜[01m[Kstd::vector<std::__cxx11::basic_string<char> > glob(const std::vector<std::__cxx11::basic_string<char> >&)[m[Kâ€™:
[01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/serial/lib/src/impl/list_ports/list_ports_linux.cc:66:40:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Ksize_t[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wsign-compare-Wsign-compare]8;;[m[K]
   66 |     for(int path_index = 0; [01;35m[Kpath_index < glob_results.gl_pathc[m[K; path_index++)
      |                             [01;35m[K~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~[m[K
[01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/serial/lib/src/impl/list_ports/list_ports_linux.cc:57:9:[m[K [01;35m[Kwarning: [m[Kvariable â€˜[01m[Kglob_retval[m[Kâ€™ set but not used [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-but-set-variable-Wunused-but-set-variable]8;;[m[K]
   57 |     int [01;35m[Kglob_retval[m[K = glob(patterns[0].c_str(), 0, NULL, &glob_results);
      |         [01;35m[K^~~~~~~~~~~[m[K
[01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/serial/lib/src/impl/list_ports/list_ports_linux.cc:[m[K In function â€˜[01m[Kstd::string format(const char*, ...)[m[Kâ€™:
[01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/serial/lib/src/impl/list_ports/list_ports_linux.cc:246:31:[m[K [01;35m[Kwarning: [m[Kcomparison of integer expressions of different signedness: â€˜[01m[Kint[m[Kâ€™ and â€˜[01m[Ksize_t[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wsign-compare-Wsign-compare]8;;[m[K]
  246 |         else if( [01;35m[Kreturn_value >= buffer_size_bytes[m[K )
      |                  [01;35m[K~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/src/CommPort.cpp:1[m[K:
[01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/include/CommPort.h:37:3:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Ktypedef[m[Kâ€™ was ignored in this declaration
   37 |   [01;35m[Ktypedef[m[K struct ProjectileRx {
      |   [01;35m[K^~~~~~~[m[K
[01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/include/CommPort.h:54:3:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Ktypedef[m[Kâ€™ was ignored in this declaration
   54 |   [01;35m[Ktypedef[m[K struct MotionRx {
      |   [01;35m[K^~~~~~~[m[K
[01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/src/CommPort.cpp:[m[K In constructor â€˜[01m[KCommPort::CommPort()[m[Kâ€™:
[01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/src/CommPort.cpp:4:18:[m[K [01;35m[Kwarning: [m[KISO C++ forbids converting a string constant to â€˜[01m[Kchar*[m[Kâ€™ [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wwrite-strings-Wwrite-strings]8;;[m[K]
    4 |   char *device = [01;35m[K"/dev/ttyACM0"[m[K;
      |                  [01;35m[K^~~~~~~~~~~~~~[m[K
[01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/src/CommPort.cpp:[m[K In member function â€˜[01m[Kfloat* CommPort::getQuaternion()[m[Kâ€™:
[01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/src/CommPort.cpp:211:21:[m[K [01;35m[Kwarning: [m[Ktaking address of packed member of â€˜[01m[KCommPort::ProjectileRx[m[Kâ€™ may result in an unaligned pointer value [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Waddress-of-packed-member-Waddress-of-packed-member]8;;[m[K]
  211 |   return [01;35m[Krx_struct_.q[m[K;
      |          [01;35m[K~~~~~~~~~~~^[m[K
[01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/src/CommPort.cpp:[m[K In member function â€˜[01m[Kuint16_t* CommPort::get_enemy_hp()[m[Kâ€™:
[01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/src/CommPort.cpp:234:62:[m[K [01;35m[Kwarning: [m[Ktaking address of packed member of â€˜[01m[KCommPort::ProjectileRx[m[Kâ€™ may result in an unaligned pointer value [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Waddress-of-packed-member-Waddress-of-packed-member]8;;[m[K]
  234 | uint16_t *CommPort::get_enemy_hp() { return [01;35m[Kthis->rx_struct_.enemy_hp[m[K; }
      |                                             [01;35m[K~~~~~~~~~~~~~~~~~^~~~~~~~[m[K
[01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/src/CommPort.cpp:[m[K In member function â€˜[01m[Kvoid CommPort::update_send_motion(double, double, double)[m[Kâ€™:
[01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/src/CommPort.cpp:268:11:[m[K [01;35m[Kwarning: [m[KISO C++ forbids variable length array â€˜[01m[Ktx_buffer[m[Kâ€™ [[01;35m[K]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wvla-Wvla]8;;[m[K]
  268 |   uint8_t [01;35m[Ktx_buffer[m[K[MotionRxSize];
      |           [01;35m[K^~~~~~~~~[m[K
In file included from [01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/src/ContactNode.cpp:3[m[K:
[01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/include/CommPort.h:37:3:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Ktypedef[m[Kâ€™ was ignored in this declaration
   37 |   [01;35m[Ktypedef[m[K struct ProjectileRx {
      |   [01;35m[K^~~~~~~[m[K
[01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/include/CommPort.h:54:3:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Ktypedef[m[Kâ€™ was ignored in this declaration
   54 |   [01;35m[Ktypedef[m[K struct MotionRx {
      |   [01;35m[K^~~~~~~[m[K
In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
                 from [01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/include/CommPort.h:7[m[K,
                 from [01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/src/ContactNode.cpp:3[m[K:
/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (ContactNode::*(ContactNode*))()>; MessageT = hero_msgs::msg::Motion_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = hero_msgs::msg::Motion_<std::allocator<void> >; CallbackT = std::_Bind<void (ContactNode::*(ContactNode*))()>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<hero_msgs::msg::Motion_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = hero_msgs::msg::Motion_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = hero_msgs::msg::Motion_<std::allocator<void> >; CallbackT = std::_Bind<void (ContactNode::*(ContactNode*))()>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<hero_msgs::msg::Motion_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = hero_msgs::msg::Motion_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = hero_msgs::msg::Motion_<std::allocator<void> >; CallbackT = std::_Bind<void (ContactNode::*(ContactNode*))()>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<hero_msgs::msg::Motion_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = hero_msgs::msg::Motion_<std::allocator<void> >; CallbackT = std::_Bind<void (ContactNode::*(ContactNode*))()>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<hero_msgs::msg::Motion_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/src/ContactNode.cpp:30:69:[m[K   required from here
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K [01;31m[Kerror: [m[Kno match for â€˜[01m[Koperator=[m[Kâ€™ (operand types are â€˜[01m[Krclcpp::detail::AnySubscriptionCallbackHelper<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void>, false>::variant_type[m[Kâ€™ {aka â€˜[01m[Kstd::variant<std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&)>, std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >[m[Kâ€™} and â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<hero_msgs::msg::Motion_<std::allocator<void> >, std::_Bind<void (ContactNode::*(ContactNode*))()>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void()>[m[Kâ€™})
  394 |       [01;31m[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)[m[K;
      |       [01;31m[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
                 from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
                 from [01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/include/CommPort.h:7[m[K,
                 from [01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/src/ContactNode.cpp:3[m[K:
[01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&)>, std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
 1461 |         [01;36m[Koperator[m[K=(_Tp&& __rhs)
      |         [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
/usr/include/c++/11/variant: In substitution of â€˜[01m[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void()>&&; <template-parameter-2-2> = void; _Types = {std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&)>, std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™:
[01m[K/usr/include/c++/11/variant:1457:14:[m[K   required by substitution of â€˜[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&)>, std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&)>, std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&)>, std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&)>, std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&)>, std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void()>][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K   required from â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (ContactNode::*(ContactNode*))()>; MessageT = hero_msgs::msg::Motion_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = hero_msgs::msg::Motion_<std::allocator<void> >; CallbackT = std::_Bind<void (ContactNode::*(ContactNode*))()>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<hero_msgs::msg::Motion_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = hero_msgs::msg::Motion_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = hero_msgs::msg::Motion_<std::allocator<void> >; CallbackT = std::_Bind<void (ContactNode::*(ContactNode*))()>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<hero_msgs::msg::Motion_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = hero_msgs::msg::Motion_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = hero_msgs::msg::Motion_<std::allocator<void> >; CallbackT = std::_Bind<void (ContactNode::*(ContactNode*))()>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<hero_msgs::msg::Motion_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = hero_msgs::msg::Motion_<std::allocator<void> >; CallbackT = std::_Bind<void (ContactNode::*(ContactNode*))()>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<hero_msgs::msg::Motion_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/src/ContactNode.cpp:30:69:[m[K   required from here
[01m[K/usr/include/c++/11/variant:1375:15:[m[K [01;31m[Kerror: [m[Kno type named â€˜[01m[Ktype[m[Kâ€™ in â€˜[01m[Kstruct std::enable_if<false, void>[m[Kâ€™
 1375 |         using [01;31m[K__accepted_type[m[K = __to_type<__accepted_index<_Tp>>;
      |               [01;31m[K^~~~~~~~~~~~~~~[m[K
/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of â€˜[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (ContactNode::*(ContactNode*))()>; MessageT = hero_msgs::msg::Motion_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[Kâ€™:
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from â€˜[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = hero_msgs::msg::Motion_<std::allocator<void> >; CallbackT = std::_Bind<void (ContactNode::*(ContactNode*))()>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<hero_msgs::msg::Motion_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = hero_msgs::msg::Motion_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = hero_msgs::msg::Motion_<std::allocator<void> >; CallbackT = std::_Bind<void (ContactNode::*(ContactNode*))()>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<hero_msgs::msg::Motion_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = hero_msgs::msg::Motion_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = hero_msgs::msg::Motion_<std::allocator<void> >; CallbackT = std::_Bind<void (ContactNode::*(ContactNode*))()>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<hero_msgs::msg::Motion_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from â€˜[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = hero_msgs::msg::Motion_<std::allocator<void> >; CallbackT = std::_Bind<void (ContactNode::*(ContactNode*))()>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<hero_msgs::msg::Motion_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<hero_msgs::msg::Motion_<std::allocator<void> >, std::allocator<void> > >][m[Kâ€™
[01m[K/home/orangepi/GM/RESOURCES/ros2_ws/src/contact/src/ContactNode.cpp:30:69:[m[K   required from here
[01m[K/usr/include/c++/11/variant:1398:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&)>, std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
 1398 |       variant& [01;36m[Koperator[m[K=(const variant&) = default;
      |                [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/c++/11/variant:1398:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<hero_msgs::msg::Motion_<std::allocator<void> >, std::_Bind<void (ContactNode::*(ContactNode*))()>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void()>[m[Kâ€™} to â€˜[01m[Kconst std::variant<std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&)>, std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&[m[Kâ€™
 1398 |       variant& operator=([01;36m[Kconst variant&[m[K) = default;
      |                          [01;36m[K^~~~~~~~~~~~~~[m[K
[01m[K/usr/include/c++/11/variant:1399:16:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&)>, std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[Kâ€™
 1399 |       variant& [01;36m[Koperator[m[K=(variant&&) = default;
      |                [01;36m[K^~~~~~~~[m[K
[01m[K/usr/include/c++/11/variant:1399:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<hero_msgs::msg::Motion_<std::allocator<void> >, std::_Bind<void (ContactNode::*(ContactNode*))()>, void>::callback_type[m[Kâ€™ {aka â€˜[01m[Kstd::function<void()>[m[Kâ€™} to â€˜[01m[Kstd::variant<std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&)>, std::function<void(const hero_msgs::msg::Motion_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<hero_msgs::msg::Motion_<std::allocator<void> >, std::default_delete<hero_msgs::msg::Motion_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const hero_msgs::msg::Motion_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<hero_msgs::msg::Motion_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&[m[Kâ€™
 1399 |       variant& operator=([01;36m[Kvariant&&[m[K) = default;
      |                          [01;36m[K^~~~~~~~~[m[K
gmake[2]: *** [CMakeFiles/contact.dir/build.make:76: CMakeFiles/contact.dir/src/ContactNode.cpp.o] Error 1
gmake[1]: *** [CMakeFiles/Makefile2:154: CMakeFiles/contact.dir/all] Error 2
gmake: *** [Makefile:146: all] Error 2
